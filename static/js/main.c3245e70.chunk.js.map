{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","Cardlist","robots","Cardcomponent","map","user","i","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sOAiBeA,EAfF,SAACC,GACb,IAAWC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACxB,OACC,yBAAKC,UAAU,gCACf,yBAAMC,IAAK,SAAQC,IAAG,+BAA0BH,EAA1B,OACtB,6BACA,4BAAKF,GACL,+BAAKC,MCIQK,EAVE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACPC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACvC,OAAQ,kBAAC,EAAD,CAAMC,IAAOD,EAAGT,GAAKK,EAAOI,GAAGT,GAAIF,KAAOO,EAAOI,GAAGX,KAAMC,MAASM,EAAOI,GAAGV,WAE1F,OACQ,6BACEO,ICQIK,EAdE,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAE9B,OACC,yBAAKZ,UAAU,gCACN,2BAAOa,KAAK,SACZC,YAAa,gBACbC,SAAWH,MCIPI,G,MAXA,SAACpB,GAEd,OACE,yBAAKqB,MAAO,CAAEC,UAAY,SAAUC,OAAS,kBAAmBC,OAAQ,UACvExB,EAAMyB,YC0DIC,E,kDApDd,aAAc,IAAD,8BACZ,gBAeFC,eAAgB,SAACC,GACf,EAAKC,SAAS,CAACd,YAAYa,EAAME,OAAOC,SAfxC,EAAKC,MAAM,CACZxB,OAAO,GACPO,YAAY,IAJC,E,gEASM,IAAD,OAClBkB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACrB,OAAO6B,S,+BAUpC,IAAD,OACOC,EAAgBC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAAhC,GAC9C,OAAOA,EAAOP,KAAKwC,cAAcC,SAAS,EAAKV,MAAMjB,YAAY0B,kBAElE,OAAgC,IAA7BF,KAAKP,MAAMxB,OAAOmC,OAEd,wBAAIvC,UAAU,MAAd,aAMN,yBAAMA,UAAU,MAEf,wBAAIA,UAAU,MAAd,iBACA,kBAAC,EAAD,CAAWY,aAAeuB,KAAKZ,iBAC/B,kBAAC,EAAD,KACS,kBAAC,EAAD,CAAUnB,OAAQ8B,U,GAxCbM,aCCZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTlB,MAAK,SAAAuB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3B,QACfsB,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,MCtFjEC,IAASC,OACR,kBAAC,EAAD,MACEC,SAASC,eAAe,SDUpB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,yBAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,yBAAN,sBAEP7B,IAgEV,SAAiCO,EAAOC,GAEtCpB,MAAMmB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5B5C,MAAK,SAAAC,GAEJ,IAAM4C,EAAc5C,EAAS2C,QAAQE,IAAI,gBAEnB,MAApB7C,EAAS8C,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAMjD,MAAK,SAAAuB,GACjCA,EAAa2B,aAAalD,MAAK,WAC7Ba,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEAvFAsB,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAMjD,MAAK,WACjC6B,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OChC/BE,I","file":"static/js/main.c3245e70.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) =>\r\n{    const {name, email, id } =props; //destructor it can be added directly in the parametrers //\r\n\treturn  (\r\n\t\t<div className='bg-gold dib pa3 ma2 br3 grow'>\r\n\t\t<img  alt ='symbol'src={`https://robohash.org/${id}?`} />\r\n\t\t<div>\r\n\t\t<h2>{name}</h2>\r\n\t\t<p> {email}</p>\r\n\t\t</div>\t\t\t\t\r\n\r\n\t\t </div>\r\n\t\t);\r\n}\r\n \r\n\r\nexport default Card;","import  React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robots}) => {\r\n      const Cardcomponent = robots.map((user,i)=> {\r\n     \treturn  <Card key = {i} id= {robots[i].id} name= {robots[i].name} email= { robots[i].email}/>\r\n     })\r\n\treturn (\r\n         <div>\r\n         \t{Cardcomponent}\r\n         </div>);\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\n\r\nconst Searchbox =({searchfield,searchChange}) => {\r\n\r\n\treturn (\r\n\t\t<div className='bg-gold dib pa3 ma2 br3 grow'>\r\n           <input type='search' \r\n           placeholder ='search robots'\r\n           onChange ={searchChange}\r\n           />\r\n         </div> \r\n\t\t);\r\n}\r\n\r\n\r\n\r\nexport default Searchbox;","import React from 'react';\r\n \r\nconst Scroll = (props) =>\r\n{\r\n  return (\r\n  \t\t<div style={{ overflowY : 'scroll', border : '2px solid black', height :'500px'}}>\r\n  \t\t{props.children}\r\n\r\n  \t\t</div>\r\n\r\n  \t);\r\n}\r\n\r\nexport default Scroll;","import React , {Component} from 'react';\r\nimport Cardlist from '../components/Cardlist';\r\nimport Searchbox from '../components/Searchbox';\r\n//import {robots} from './robots';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll'; \r\n\r\n\r\n\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\trobots:[],\r\n\tsearchfield:''\r\n}\r\n\r\n\t}\r\n\r\ncomponentDidMount(){\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response=>response.json())\r\n\t.then(users => this.setState({robots:users}));\r\n}\t\r\n\r\n\r\nonSearchChange =(event) => {\r\n\t\tthis.setState({searchfield:event.target.value})\r\n\r\n}\r\n\r\n\trender()\r\n\t{  \r\n\t\tconst filteredRobots= this.state.robots.filter(robots =>{\r\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n\t\t})\r\n\t\tif(this.state.robots.length === 0)\r\n\t\t{\r\n\t\treturn <h1 className='f1'> Loading </h1>\r\n\t\t}\t\r\n\t\t\t else {\r\n\r\n\t\treturn (\r\n\t\t\t\t\r\n\t\t\t< div className='tc'>\r\n\r\n\t\t\t\t<h1 className='f1'> RoboFriends </h1>\r\n\t\t\t\t<Searchbox searchChange ={this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n           \t\t<Cardlist robots={filteredRobots}/>\r\n           \t\t</Scroll>\r\n           \t</div>\t\r\n      \r\n\r\n\r\n\r\n\r\n             );\r\n          }   \r\n   }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n//import Card from './Card';\n//import Cardlist from './Cardlist';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n//import {robots} from './robots';\n\nReactDOM.render(\n\t<App/>\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}